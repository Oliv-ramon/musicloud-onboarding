name: Deploy on AWS

on:
  push:
    branches:
      - 'main'

env:
  ECR_REPOSITORY: musicloud-api
  ECS_SERVICE: musicloud-api-cluster-service
  ECS_CLUSTER: musicloud-api-cluster
  ECS_TASK_DEFINITION: ./task-definition.json
  CONTAINER_NAME: musicloud-api-container

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install dependencies
        run: npm i
      - name: Test
        run: npm test

  integration_test:
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Make envfile
        uses: SpicyPizza/create-envfile@v1
        with:
          envkey_POSTGRES_USER: 'postgres'
          envkey_POSTGRES_PASSWORD: '123456'
          envkey_POSTGRES_DB: 'musicloud'
          envkey_POSTGRES_HOST: 'musicloud-sql'
          envkey_POSTGRES_PORT: 5433
          envkey_PORT: 3000
          envkey_JWT_SECRET: 'secret'
          file_name: .env
      - name: Run Migrations
        run: npm run docker:migrate
      - name: Integration Test
        run: docker-compose run musicloud-api npm run ci:e2e:test

  deploy:
    needs: [integration_test]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@13d241b293754004c80624b5567555c4a39ffbe3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@aaf69d68aa3fb14c1d5a6be9ac61fe15b48453a2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: false
